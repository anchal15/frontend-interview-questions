/**
Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.

If target is not found in the array, return [-1, -1].

You must write an algorithm with O(log n) runtime complexity.
*/

//Approach which has O(n) complexity
function indexes(v, x)
    {
        // code here
        let firstIndex = -1;
        let lastIndex = -1;
        
        for(let i=0; i<v.length; i++) {
            if(v[i] === x && firstIndex=== -1) {
                firstIndex = i;
                lastIndex = i;
            } else if(v[i] == x) {
                lastIndex = i;
            }
            else if(v[i] > x){
                break;
            }
        }
        return [firstIndex, lastIndex]
    }

// O(logn)
var searchRange = function(nums, target) {
    const binarySearch = (nums, target, isSearchingLeft) => {
        let left = 0;
        let right = nums.length - 1;
        let idx = -1;
      
        while (left <= right) {
            const mid = Math.floor((left + right) / 2);
            
            if (nums[mid] > target) {
                right = mid - 1;
            } else if (nums[mid] < target) {
                left = mid + 1;
            } else {
                idx = mid;
                if (isSearchingLeft) {
                    right = mid - 1;
                } else {
                    left = mid + 1;
                }
            }
        }
      
        return idx;
    };
    
    const left = binarySearch(nums, target, true);
    const right = binarySearch(nums, target, false);
    
    return [left, right];    
};
