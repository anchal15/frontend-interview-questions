/**
Given an array of positive integers nums and a positive integer target, return the minimal length of a 
subarray
 whose sum is greater than or equal to target. If there is no such subarray, return 0 instead.

 

Example 1:

Input: target = 7, nums = [2,3,1,2,4,3]
Output: 2
Explanation: The subarray [4,3] has the minimal length under the problem constraint.
*/

// Question URL - https://leetcode.com/problems/minimum-size-subarray-sum/description/

//Brute force Solution
function smallestSubWithSum(arr, x) {
        // code here
        let count = 0;
        for(let i=0; i<arr.length; i++) {
            let sum = 0;
            for(let j=i; j<arr.length; j++) {
                sum += arr[j] 
                if(sum >= x) {
                    if(count==0 || count>j-i + 1) count = j-i + 1;
                }
                
            }
        }
        return count;
    }

/** We keep expanding the window by adding elements to the sum until the sum is greater than x.
* Once the sum exceeds x, we try to shrink the window from the left to find the minimum length subarray that still has a sum greater than x.
* Sliding window problem
*/
var minSubArrayLen = function(x, arr) {
     let currentSum = 0;
        let start = 0;
        let min = Infinity;
        
        for(let i=0; i<arr.length; i++) {
            currentSum += arr[i];
            
            while(currentSum >= x) {
                min = Math.min(min, i-start+1)
                currentSum = currentSum - arr[start];
                start++;
            }
        }
        return min === Infinity? 0: min;
};
